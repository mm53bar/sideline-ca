--- 
wordpress_id: 68
layout: post
title: GridView control added to Pick&#8217;Em module
wordpress_url: http://blog.sideline.ca/2004/10/18/gridview-control-added-to-pickem-module/

<p>I've got Anthony's datagrid moved over into PickEmGridView.ascx that loads as part of the ctl method.  As part of this, I was able to learn a bit about the ctl method.</p>
<p>In order to use the ctl method, you have to reference your control in both the .dnn file and in the page_init method of your main module page.  Controls in the .dnn file generally look like this:</p>
<pre>          &amp;lt;controls&amp;gt;<br />            &amp;lt;control&amp;gt;<br />              &amp;lt;title&amp;gt;PickEmSPAN class=html&amp;gt;title&amp;gt;<br />              &amp;lt;src&amp;gt;PickEm.ascxSPAN class=html&amp;gt;src&amp;gt;<br />              &amp;lt;type&amp;gt;ViewSPAN class=html&amp;gt;type&amp;gt;<br />            SPAN class=html&amp;gt;control&amp;gt;<br />            &amp;lt;control&amp;gt;<br />              &amp;lt;key&amp;gt;EditSPAN class=html&amp;gt;key&amp;gt;<br />              &amp;lt;title&amp;gt;Edit PickEmSPAN class=html&amp;gt;title&amp;gt;<br />              &amp;lt;src&amp;gt;EditPickEm.ascxSPAN class=html&amp;gt;src&amp;gt;<br />              &amp;lt;iconfile&amp;gt;icon_PickEm_32px.gifSPAN class=html&amp;gt;iconfile&amp;gt;<br />              &amp;lt;type&amp;gt;EditSPAN class=html&amp;gt;type&amp;gt;<br />            SPAN class=html&amp;gt;control&amp;gt;<br />          SPAN class=html&amp;gt;controls&amp;gt;</pre>
<p>The main point to take away is that each control represents an .ascx user control in your project.  Along with a src attribute, each control has a title, key and type.  The main control rarely has a key since it's the main control and is usually referenced by the Cancel, OK and Done buttons that exist on the other user controls.</p>
<p><img vspace="5" hspace="10" border="0" align="left" src="/BlogImages/dnn_ctl_menu.png" alt="Sample DNN Control Menu" />However, simply referencing the controls in your .dnn file is not enough.  Now you need to write some code to ensure that the mini-SolPart menu for your module gets populated.</p>
<p>This code is found in the Page_Init call of your main page.  In the case of Pick'Em, you will find the following code in PickEm.ascx.vb:</p>
<pre>            MyBase.Actions.Add(GetNextActionID, _<br />               "Configure Schedule", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Schedule"), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Configure Users", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Users"), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Configure Settings", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Settings"), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Add PickEm Game", _<br />               "", _<br />               URL:=EditURL(), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Grid View", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Grid"), _<br />               secure:=SecurityAccessLevel.View, _<br />               Visible:=True)<br />            MyBase.HelpFile = "Documentation/PickEm.txt"</pre>
<p>Amongst other settings, each control gets registered with a title, a URL, a security level and a visibility attribute.  Notice the entry near the end for the Grid View control.  For this control, I've given it a security level of SecurityAccessLevel.View and a visibility of True.  This will actually force a little pencil icon (the only contains the Grid View control) for the module even when a user is not logged in.   Since this isn't desired behaviour, I will switch the visiblity to False once I'm done developing.  Of course, this control will also need to be added to the .dnn file.</p>
<p>The main advantage to using the <a href="http://www.asp.net/Forums/ShowPost.aspx'tabindex=1&amp;amp;PostID=691663">ctl method of loading a user control rather than the LoadControl method</a> for this situation is that the Grid View control will be loaded onto its own page rather than sharing the portal page with other modules.  Since I'm expecting the Grid View to be rather large in size, having access to the full page is quite nice.</p>
--- 
wordpress_id: 68
layout: post
title: GridView control added to Pick&#8217;Em module
wordpress_url: http://blog.sideline.ca/2004/10/18/gridview-control-added-to-pickem-module/

<p>I've got Anthony's datagrid moved over into PickEmGridView.ascx that loads as part of the ctl method.  As part of this, I was able to learn a bit about the ctl method.</p>
<p>In order to use the ctl method, you have to reference your control in both the .dnn file and in the page_init method of your main module page.  Controls in the .dnn file generally look like this:</p>
<pre>          &amp;lt;controls&amp;gt;<br />            &amp;lt;control&amp;gt;<br />              &amp;lt;title&amp;gt;PickEmSPAN class=html&amp;gt;title&amp;gt;<br />              &amp;lt;src&amp;gt;PickEm.ascxSPAN class=html&amp;gt;src&amp;gt;<br />              &amp;lt;type&amp;gt;ViewSPAN class=html&amp;gt;type&amp;gt;<br />            SPAN class=html&amp;gt;control&amp;gt;<br />            &amp;lt;control&amp;gt;<br />              &amp;lt;key&amp;gt;EditSPAN class=html&amp;gt;key&amp;gt;<br />              &amp;lt;title&amp;gt;Edit PickEmSPAN class=html&amp;gt;title&amp;gt;<br />              &amp;lt;src&amp;gt;EditPickEm.ascxSPAN class=html&amp;gt;src&amp;gt;<br />              &amp;lt;iconfile&amp;gt;icon_PickEm_32px.gifSPAN class=html&amp;gt;iconfile&amp;gt;<br />              &amp;lt;type&amp;gt;EditSPAN class=html&amp;gt;type&amp;gt;<br />            SPAN class=html&amp;gt;control&amp;gt;<br />          SPAN class=html&amp;gt;controls&amp;gt;</pre>
<p>The main point to take away is that each control represents an .ascx user control in your project.  Along with a src attribute, each control has a title, key and type.  The main control rarely has a key since it's the main control and is usually referenced by the Cancel, OK and Done buttons that exist on the other user controls.</p>
<p><img vspace="5" hspace="10" border="0" align="left" src="/BlogImages/dnn_ctl_menu.png" alt="Sample DNN Control Menu" />However, simply referencing the controls in your .dnn file is not enough.  Now you need to write some code to ensure that the mini-SolPart menu for your module gets populated.</p>
<p>This code is found in the Page_Init call of your main page.  In the case of Pick'Em, you will find the following code in PickEm.ascx.vb:</p>
<pre>            MyBase.Actions.Add(GetNextActionID, _<br />               "Configure Schedule", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Schedule"), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Configure Users", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Users"), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Configure Settings", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Settings"), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Add PickEm Game", _<br />               "", _<br />               URL:=EditURL(), _<br />               secure:=SecurityAccessLevel.Edit, _<br />               Visible:=True)<br />            MyBase.Actions.Add(GetNextActionID, _<br />               "Grid View", _<br />               "", _<br />               URL:=EditURL(, _<br />               , _<br />               "Grid"), _<br />               secure:=SecurityAccessLevel.View, _<br />               Visible:=True)<br />            MyBase.HelpFile = "Documentation/PickEm.txt"</pre>
<p>Amongst other settings, each control gets registered with a title, a URL, a security level and a visibility attribute.  Notice the entry near the end for the Grid View control.  For this control, I've given it a security level of SecurityAccessLevel.View and a visibility of True.  This will actually force a little pencil icon (the only contains the Grid View control) for the module even when a user is not logged in.   Since this isn't desired behaviour, I will switch the visiblity to False once I'm done developing.  Of course, this control will also need to be added to the .dnn file.</p>
<p>The main advantage to using the <a href="http://www.asp.net/Forums/ShowPost.aspx'tabindex=1&amp;amp;PostID=691663">ctl method of loading a user control rather than the LoadControl method</a> for this situation is that the Grid View control will be loaded onto its own page rather than sharing the portal page with other modules.  Since I'm expecting the Grid View to be rather large in size, having access to the full page is quite nice.</p>

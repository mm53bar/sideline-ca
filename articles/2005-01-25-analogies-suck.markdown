--- 
wordpress_id: 98
layout: post
title: Analogies suck!
wordpress_url: http://blog.sideline.ca/2005/01/25/analogies-suck/

<p>This definitely makes sense to me.  Especially the 'weakness shoring up weakness' part.  While I like to use analogies, I often find that I don't know much about construction when I use a construction analogy ' I'm hoping that the person on the other end of the argument has a similar set of experiences to me.  Of course, then ends up burning me in the end!</p><p><em>Analogies - What You Know That Ain't So:</em> </p><blockquote><p>Like <a href="http://www.martinfowler.com/bliki/MetaphoricQuestioning.html">Martin Fowler</a>, I'm "suspicious of using metaphors of other professions to reason about software development". But for different reasons.</p><p>The problem is that typically, reasoning about software development on the basis of analogy (which is what we really mean by "metaphor") goes in a certain direction: we compare software development with something we don't know really well - say, the construction industry, or the manufacturing industry, or the practice of accounting, etc. And then we use some cliched insights about these mostly unfamiliar areas to buttress our well-worn, strongly-held convictions about software development, which we think we know well enough, thank you. Hence the perennial arguments: "once a building is erected it's incredibly expensive to make structural changes to it, so get your architecture right first thing".</p><p>The maneuver from a position of sketchy knowledge to one of smug complacency has little appeal to me - weakness shoring up weakness. It is a textbook illustration of the old saw that "it ain't what you don't know that kills you, it's what you know that just ain't so".</p><p>On the other hand, I know quite a few software practitioners who had (or still have) a completely different career, and real expertise in that field; one example that comes to mind is <a href="http://redsquirrel.com/cgi-bin/dave">Dave</a>, who originally set out to be a family therapist. Such people are entitled to draw all the analogies they want, I believe; such a cross-pollination of ideas is in fact key to the vitality of our field, and perhaps of any field.</p><p>So that's another combination - strength with strength. I'm a bit twiddler by vocation, so I can't keep myself from thinking of the remaining two. And in fact, we also use analogies to good effect when we discover the "real" truth about a field we didn't actually know that much about, and use that to put our software development knowledge in perspective. Reading about lean manufacturing or the Theory of Constraints woke me up to some problems <i>actually</i> relevant in manufacturing, as opposed to my mental picture inspired mostly by Charlie Chaplin in <a href="http://www.imdb.com/title/tt0027977/">Modern Times</a>. It also provided me with an abstract view of these problems, which was necessary, absent experience on a shop floor, to understand the narrative. And this abstract view in turn happened to have elements applicable to software work. That would be gaining strength from previous weaknesses of knowledge.</p><p>Lastly, I might expect a category where an analogy to something that we are <i>particularly</i> familiar with, an everyday experience maybe, illuminates unprobed questions about software development - unsuspected weaknesses. As an example, I particularly liked George Paci's way of subjecting the term "discipline" to scrutiny, as used in the expression "high discipline methodology", by way of an analogy to the everyday (for some of us) experience of driving a car - this was in a recent <a href="http://groups.yahoo.com/group/extremeprogramming/message/102238">thread</a> on the XP mailing list.</p></blockquote><i>[Via <a href="http://bossavit.com/thoughts/archives/000785.html">Incipient(thoughts)</a>]</i>

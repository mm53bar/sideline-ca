--- 
wordpress_id: 163
layout: post
title: Repeater templates are driving me nuts!
wordpress_url: http://www.sideline.ca/2005/07/09/repeater-templates-are-driving-me-nuts/

<p>I like having different styles in my repeater controls for the <em>itemtemplate</em> and <em>alternatingitemtemplate</em>.  It makes the data easier to read and is simply cooler.  I like using a repeater because it's not as heavy as a datagrid.  However, using a repeater is a bit of a pain for something as simple as this.</p>
<p>The benefit of a repeater is you don't have to manage columns like you do with a datagrid.  It's just free-form HTML that gets dumped into the page as the repeater is databound to some data.  It gives me a lovely spaghetti-like feeling from my old ASP days (just imagining those beautiful days of response.write loops gives me a warm fuzzy feeling'.aaahhh).  Now we all know that spaghetti makes a mess and this is no exception.  In order to change the style for your <em>alternatingitemtemplate</em>, you need to duplicate all of your HTML code from the <em>itemtemplate</em> and then make a simple little change to your row colour.</p>
<p>This isn't too bad except for the fact that anytime you touch the HTML code, VS.Net (in all of it's helpful glory) warns you that you've got elements with duplicate id's.  Of course, that's because you've been forced to copy all of your databound elements into both the <em>itemtemplate</em> and the <em>alternatingitemtemplate</em>.  To really help you out, VS.Net goes ahead and just renames those 'offending' elements so that you don't run into collisions.  Of course, that's the precise opposite of what I want it to do in this situation, but I can't seem to convince it that my intentions are sound.</p>
<p>This gets even more frustrating when I talk to somebody about my problems.  They invariably suggest 'why don't you use a datagrid'  You can just define the styles as part of the <em>itemtemplate</em> so that it's separate from your content.  It's much cleaner.'  Thanks for the help, dude.  But I want to use a nice light-weight repeater, damn it!  And I also want to implement some <a href="http://www.dotnetjunkies.com/Article/4365153F-D2F5-4C77-9FE7-94DD1AAF6F98.dcik">cool grouping features</a> that I saw recently.</p>
<p>I've decided to take a different tact.  Well, actually, I decided this many moons ago, but could never come up with the proper method for implementing it.</p>
<p>For quite a while, I've been trying to get my repeaters to dynamically load their <em>itemtemplate</em> and <em>alternatingitemtemplate</em> content from template files that I store within my project.  I like this idea - the separation of the content without all of the clunkiness of working with the IDE.  On top of that, the HTML view of my page is nice and light.</p>
<p>Easier said than done.  After following the steps in <a href="http://www.dotnetbips.com/2831BB61-9B8C-4DC0-B638-132051E56052.aspx'articleid=84">Bipin Joshi's article on dotnetbips.com</a>, it wouldn't work.  And it didn't give me a nice error.  As always, the fault was mine.  I happened to miss his little line that looks something like this:</p>
<p align="center"><font color="#0000ff">&amp;lt;%# Databinder.Eval(((DataGridItem)Container).DataItem,"lastname")%&amp;gt;</font></p>
<p>Noticing the casting to a DataGridItem would saved my bacon.  But I missed it.  Recently, <a href="http://msdn.microsoft.com/msdnmag/issues/05/06/CuttingEdge/default.aspx">Dino Esposito has outlined the reasons</a> that this cast needs to occur:</p>
<blockquote>You shouldn't notice anything different in the page's markup, but this time the item template is being generated from an external compiled resource. A little change is required to make the item template of Figure 1 work unchanged as a distinct ASCX component. The object of the change is the DataBinder expression: &amp;lt;&amp;lt;/bloghelper&amp;gt;</blockquote>
